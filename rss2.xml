<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Maxxice blog</title>
    <link>https://blog.futuredream.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="true" rel="hub"/>
    <description>java springBoot springCloud</description>
    <pubDate>Sat, 25 Nov 2017 16:34:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JDBI -- 简介</title>
      <link>https://blog.futuredream.top/2017/11/21/jdbi/</link>
      <guid>https://blog.futuredream.top/2017/11/21/jdbi/</guid>
      <pubDate>Mon, 20 Nov 2017 19:03:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;五分钟介绍&quot;&gt;&lt;a href=&quot;#五分钟介绍&quot; class=&quot;headerlink&quot; title=&quot;五分钟介绍&quot;&gt;&lt;/a&gt;五分钟介绍&lt;/h3&gt;&lt;p&gt;JDBI是Java的SQL连接处理的便利工具库。它试图以Java中使用集合，bean等来映射关系来访问关系数据库，同
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="五分钟介绍"><a href="#五分钟介绍" class="headerlink" title="五分钟介绍"></a>五分钟介绍</h3><p>JDBI是Java的SQL连接处理的便利工具库。它试图以Java中使用集合，bean等来映射关系来访问关系数据库，同时保持与JDBC相同的粒度。它公开了两种不同风格的API，一种流式风格和一种sql对象风格。</p><h3 id="流式风格的API"><a href="#流式风格的API" class="headerlink" title="流式风格的API"></a>流式风格的API</h3><p>流式风格API 如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// using in-memory H2 database</span></div><div class="line">DataSource ds = JdbcConnectionPool.create(<span class="string">"jdbc:h2:mem:test"</span>,</div><div class="line">                                          <span class="string">"username"</span>,</div><div class="line">                                          <span class="string">"password"</span>);</div><div class="line">DBI dbi = <span class="keyword">new</span> DBI(ds);</div><div class="line">Handle h = dbi.open();</div><div class="line">h.execute(<span class="string">"create table something (id int primary key, name varchar(100))"</span>);</div><div class="line"></div><div class="line">h.execute(<span class="string">"insert into something (id, name) values (?, ?)"</span>, <span class="number">1</span>, <span class="string">"Brian"</span>);</div><div class="line"></div><div class="line">String name = h.createQuery(<span class="string">"select name from something where id = :id"</span>)</div><div class="line">                    .bind(<span class="string">"id"</span>, <span class="number">1</span>)</div><div class="line">                    .map(StringMapper.FIRST)</div><div class="line">                    .first();</div><div class="line">                    </div><div class="line">assertThat(name, equalTo(<span class="string">"Brian"</span>));</div><div class="line"></div><div class="line">h.close();</div></pre></td></tr></table></figure><p>DBI对象类似于JDBC数据源，并且通常通过传递JDBC数据源来构造。有参构造函数采取JDBC URL和证书，以及其他手段（密码）。从DBI实例获得Handle实例。Handle表示到数据库的单个连接。Handles处理器们依赖于底层的JDBC连接对象。</p><p>使用处理器Handles，您可以创建和执行语句，查询，调用，批处理或准备好的批处理。在上面的例子中，我们执行一个语句来创建一个表。执行另一个SQL语句时使用两个占位符参数来插入值。最后，我们构造一个查询，将一个值绑定到查询中的命名参数，将结果映射为String类型，并采取回来的第一个结果。</p><p>创建和查询的命名参数设施由JDBI提供，它在实际构建准备好的语句时解析出SQL并使用位置参数。上面的例子使用默认的冒号做分隔器，但也可以使用问号做分割器。其语法类比于使用冒号的数据库，比如PostgreSQL。</p><h3 id="SQL对象风格的API"><a href="#SQL对象风格的API" class="headerlink" title="SQL对象风格的API"></a>SQL对象风格的API</h3><p>第二种，SQL对象风格API简化了创建DAO对象的常见方式，在该方法中，单个方法映射到单个语句。SQL对象定义是一个带注释的接口，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public interface MyDAO</div><div class="line">&#123;</div><div class="line">  @SqlUpdate(&quot;create table something (id int primary key, name varchar(100))&quot;)</div><div class="line">  void createSomethingTable();</div><div class="line"></div><div class="line">  @SqlUpdate(&quot;insert into something (id, name) values (:id, :name)&quot;)</div><div class="line">  void insert(@Bind(&quot;id&quot;) int id, @Bind(&quot;name&quot;) String name);</div><div class="line"></div><div class="line">  @SqlQuery(&quot;select name from something where id = :id&quot;)</div><div class="line">  String findNameById(@Bind(&quot;id&quot;) int id);</div><div class="line"></div><div class="line">  /**</div><div class="line">   * close with no args is used to close the connection</div><div class="line">   */</div><div class="line">  void close();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个接口定义了两个更新语句，其中创建与api示例中相同的创建表相同，第二个更新执行相同的插入，第三个定义查询。在后面的两个例子中，注意使用绑定限制符来对应相应的参数。</p><p>最后的方法close（）是特殊的。当它被调用时，它将关闭底层的JDBC连接。该方法可能被声明为引发异常，例如close（）方法在java.io.Closeable上执行，使其适用于Java 7中的自动资源管理。</p><p>为了使用这个sql对象定义，我们使用这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// using in-memory H2 database via a pooled DataSource</div><div class="line">JdbcConnectionPool ds = JdbcConnectionPool.create(&quot;jdbc:h2:mem:test2&quot;,</div><div class="line">                                                  &quot;username&quot;,</div><div class="line">                                                  &quot;password&quot;);</div><div class="line">DBI dbi = new DBI(ds);</div><div class="line"></div><div class="line">MyDAO dao = dbi.open(MyDAO.class);</div><div class="line"></div><div class="line">dao.createSomethingTable();</div><div class="line"></div><div class="line">dao.insert(2, &quot;Aaron&quot;);</div><div class="line"></div><div class="line">String name = dao.findNameById(2);</div><div class="line"></div><div class="line">assertThat(name, equalTo(&quot;Aaron&quot;));</div><div class="line"></div><div class="line">dao.close();</div><div class="line">ds.dispose();</div></pre></td></tr></table></figure><p>我们从DBI实例中获得一个sql对象的实例，然后调用它的方法。这里有几种不同的方式创建sql对象实例。这里的一个将对象绑定到一个特定的处理器中，所以我们需要确保在完成对象时关闭对象。</p><h3 id="获取JDBI"><a href="#获取JDBI" class="headerlink" title="获取JDBI"></a>获取JDBI</h3><p>JDBI是根据Apache许可证2.0许可的，没有额外的运行时依赖性。</p><p>Maven的<br>要在基于Apache Maven的项目中使用JDBI ，添加它是一个依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jdbi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdbi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jdbi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>您可以在<a href="http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jdbi%22" target="_blank" rel="noopener">Maven Central</a>中找到最新版本的JDBI 。</p><h4 id="下载Jar"><a href="#下载Jar" class="headerlink" title="下载Jar"></a>下载Jar</h4><p>JDBI发布jar文件可以从<a href="http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jdbi%22" target="_blank" rel="noopener">Maven Central</a>获得。</p><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><p>JDBI的主要存储库位于Github上，网址为<a href="http://github.com/brianm/jdbi/" target="_blank" rel="noopener">http://github.com/brianm/jdbi/</a></p><h4 id="邮件列表"><a href="#邮件列表" class="headerlink" title="邮件列表"></a>邮件列表</h4><p>JDBI的邮件列表以<a href="https://groups.google.com/group/jdbi上的Google" target="_blank" rel="noopener">https://groups.google.com/group/jdbi上的Google</a> Group托管</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/11/21/jdbi/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker mongoDB 单机安装办法</title>
      <link>https://blog.futuredream.top/2017/11/16/docker_one_mongoDB/</link>
      <guid>https://blog.futuredream.top/2017/11/16/docker_one_mongoDB/</guid>
      <pubDate>Wed, 15 Nov 2017 19:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/docker-library/docs/01c126
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="https://raw.githubusercontent.com/docker-library/docs/01c12653951b2fe592c1f93a13b4e289ada0e3a1/mongo/logo.png" alt="这里写图片描述"></p><p>MongoDB（来自“humongous”）是一个跨平台的面向文档的数据库。作为一个NoSQL数据库，MongoDB避开了传统的基于表格的关系数据库结构，而采用动态模式的类似JSON的文档（MongoDB称为BSON格式），使得某些类型的应用程序中的数据集成更加方便快捷。MongoDB是GNU Affero通用公共许可证和Apache许可证的组合，是免费的开源软件。使用Docker安装单机版是比较快捷的办法。</p><h4 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h4><p>安装办法如下：</p><ul><li>首先，可以打开docker hub 检索mongoDB,搜索你喜欢的MongoDB条目。像我就倾向选择 official 版本，便于拓展或后续操作。</li></ul><p><img src="http://img.blog.csdn.net/20171115093620364?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSjNva2Vy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>使用 <code>docker pull mongo</code> 来拉取一个docker镜像</li><li><p>使用密码启动服务 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name mongo -p 27017:27017 -v /home/data/mongodb/data(映射为自己的DB数据文件存储位置):/data/db -d mongo --auth</div></pre></td></tr></table></figure></li><li><p>启动之后 <code>docker exec -it some-mongo mongo admin</code> 连接至admin 来添加初始管理员用户，创建数据库，已经赋予权限。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; db.createUser(&#123; user: &apos;jsmith&apos;, pwd: &apos;some-initial-password&apos;, roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ] &#125;);(创建 admin用户) </div><div class="line">&gt; db.createUser(&#123;user:&apos;&apos;,pwd:&apos;root&apos;,roles:[&#123; role:&apos;root&apos;,db: &apos;admin&apos;&#125;]&#125;) 创建root用户</div><div class="line">&gt; db.auth(“用户名”,”密码”)给admin账户授权</div><div class="line">&gt; use octblog 数据库</div><div class="line">&gt; db.createUser(&#123;user: &quot;gevin&quot;,pwd: &quot;gevin&quot;,</div><div class="line">  roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;octblog&quot;&#125;,&#123; role: &quot;readWrite&quot;, db: &quot;octblog-log&quot; &#125; ] &#125;)创建普通读写用户</div></pre></td></tr></table></figure><ul><li>这样就可以通过外部访问数据库了</li></ul><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><p>MongoDB 权限说明</p><p>　　a MongoDB内置角色官网文档介绍：<a href="http://docs.mongoing.com/manual-zh/reference/built-in-roles.html" target="_blank" rel="noopener">http://docs.mongoing.com/manual-zh/reference/built-in-roles.html</a><br>　　b 关于MongoDB的内置角色，我们大概可以分为以下几种来简单说一下<br>　　　　b.1 Database User Roles(数据库用户角色)：read、readWrite<br>　　　　b.2 Database Administration Roles(数据库管理角色)：dbAdmin、dbOwner、userAdmin<br>　　　　b.3 Culster Administration Roles(管理员组，针对整个系统进行管理)：clusterAdmin、clusterManager、clusterMonitor、hostManager<br>　　　　b.4 Backup and Restoration Roles(备份还原角色组)：backup、restore<br>　　　　b.5 All-Database Roles(所有数据库角色)：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase<br>　　　　b.6 Superuser Roles(超级管理员)：root、(dbOwner、userAdmin、userAdminAnyDatabase这几个角色角色提供了任何数据任何用户的任何权限的能力，拥有这个角色的用户可以在任何数据库上定义它们自己的权限)<br>　　　　b.7  Internal Role(内部角色，一般情况下不建议设置)：__system<br>　　c 关于上面每一个角色的意义是什么，请自行去官网或者这篇文章去查看，地址是：<a href="http://www.cnblogs.com/SamOk/p/5162767.html" target="_blank" rel="noopener">http://www.cnblogs.com/SamOk/p/5162767.html</a></p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/11/16/docker_one_mongoDB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>格局与视野 -- 工作篇</title>
      <link>https://blog.futuredream.top/2017/11/14/education/</link>
      <guid>https://blog.futuredream.top/2017/11/14/education/</guid>
      <pubDate>Mon, 13 Nov 2017 20:46:25 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;站得高，看得远，说话抓得住重点的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;题记&quot;&gt;&lt;a href=&quot;#题记&quot; class=&quot;headerlink&quot; title=&quot;题记&quot;&gt;&lt;/a&gt;题记&lt;/h3&gt;&lt;p&gt;我出道不久，屌丝软件工程师一枚，本文
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>站得高，看得远，说话抓得住重点的。</p></blockquote><h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><p>我出道不久，屌丝软件工程师一枚，本文就聊聊自己对工作的认识和对职业的看法。经验有限，难免有不周之处，也很希望大家能指出斧正。</p><h3 id="视野与格局"><a href="#视野与格局" class="headerlink" title="视野与格局"></a>视野与格局</h3><p>在看待一个程序员的能力时，我们主要从三个方面来看待，其分别是编码能力、业务能力、协作能力。</p><h4 id="一、编码能力"><a href="#一、编码能力" class="headerlink" title="一、编码能力"></a>一、编码能力</h4><p>编码能力顾名思义就是写代码的能力，它主要体现在 – 基础知识的掌握和灵活运用，代码框架的搭建与使用，对于算法与数据结构的理解和活学活用以及遇到问题的分析处理问题的能力。<br>编程能力越强，就越能解决复杂问题，特别是当对算法有一定的了解掌握，对数据结构有特精通时，就越能避免一些诸如死锁，线程安全，故障快排等问题，并能从数据或算法根源去永远解决问题。同时，你的视野也决定着你的编码能力。如果你经常浏览各种论坛，参与各类开源项目，或者你有去了解过很多开源的技术知识，那么当出现相应的应用场景时，你就会很容易去想到对应的技术。</p><h4 id="二、业务能力"><a href="#二、业务能力" class="headerlink" title="二、业务能力"></a>二、业务能力</h4><p>业务能力其实就是个人经验的一种体验。在不同的业务场景下处理相同数据的方法就有可能是不同的。例如类似黑五购物秒杀。平常的购物由于并发数量有限，可能你需要保证客户所下的每笔订单都能成功交易。可是在秒杀场景，或者抢购场景，你可能就需要应对瞬间的高并发下单场景，但此时每笔订单却不是必须要保证下单成功，那么此时，可能就要做故意丢单，丢包等，一方面限制并发量，一方面确保不超单。那么在此过程中你的业务能力就是需要你的业务积累来确保业务的正常运行。</p><h4 id="三、协作能力"><a href="#三、协作能力" class="headerlink" title="三、协作能力"></a>三、协作能力</h4><p>大部分程序员都不是全栈工程师，就算是全栈也是需要跟产品，需求，UI等进行合作才能完成项目。如何保证几个高手互相能够配合好？如何保证项目里面水平最差的人不拖后腿？这个工程化建设，往往会跨越多个业务，以汇报关系上的团队为单位来做。包括前后端解耦，模块化，质量保证，代码风格等等。 程序员的性格非常的单纯或者简单，对于事情的处理，容易情绪化或者欠缺历练，往往影响个人的职业发展。</p><p>视野解决了人的思维高度，要抓住能和市场，或是业内人士沟通的机会，互相了解，把握各种契机，不要将自己局限在一个狭小的领域。产品／商业／市场等等都是作为一个职场人士需要涉猎的，如果你只是看技术的书籍，你需要谨慎了，自己的视野有可能会被限制了。要有职业规划和设计，发掘自己的职业方向，终身学习和抬头做事，不要想着可以在一个公司终老。</p><p>在谈论玩以上的那些之后，我们也就可以探讨下更高一层的管理与规范，工作与生活方面的心得了。</p><h3 id="管理与规范"><a href="#管理与规范" class="headerlink" title="管理与规范"></a>管理与规范</h3><p>当身处在一个团队，并管理一个团队时，我们可能就会想一下的几个问题：</p><ol><li>如何提高开发效率、如何培养技术团队、如何选拔技术人才、如何建立企业文化?</li><li>如何整合现有资源、如何按标准流程去做事、如何设计系统架构、如何进行异地工作、如何跨团队工作、如何高效沟通?<br>对此，我是有一些建议</li><li>开发团队建立初期，要定义开发规范与流程，培养核心技术人员并分阶段进行改造。</li><li>高效开发。懂得敏捷开发，学习Scrum敏捷开发方式，学习将团队拆分为Scrum小组，Scrum Master快速评估开发量，技术评审，很分配督促开发任务，每日召开stand up并且参与到编码中来，Product Owner来负责整个产品，把控整个业务逻辑。Scrum Team 互相协作完成各项开发和测试任务任务，按照时间与优先级，顺次完成并每日汇总。</li></ol><h3 id="工作与生活"><a href="#工作与生活" class="headerlink" title="工作与生活"></a>工作与生活</h3><p>作为一个程序猿，可能一天不写代码手就会痒又或是为了一个问题可以废寝忘食；其实这都没什么问题，但要注意生活和工作要分离开来，工作时跟要注重业务流程，团队协作与自己技术的点滴积累，同时认清自己的职业规划是管理走向还是技术走向。并且根据不同的规划，去有目的的培养自己充实自己。在生活中，除了摆弄摆弄自己的技术博客，研究下优秀代码，多多参与线下沙龙之外更要注重自己的身体，多锻炼，多健身。行万里路胜读万卷书，要喝热爱技术的小伙伴多去远方探讨技术和人生，不要将工作带到生活，不要局限在工作，而要将兴趣和快乐融入生活，充实自我，丰富自我。 </p><style type="text/css">    p {        text-indent: 2em    }</style>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/11/14/education/#disqus_thread</comments>
    </item>
    
    <item>
      <title>耕</title>
      <link>https://blog.futuredream.top/2017/11/12/farming/</link>
      <guid>https://blog.futuredream.top/2017/11/12/farming/</guid>
      <pubDate>Sat, 11 Nov 2017 20:42:13 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;春种一粒粟，秋收万颗子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或许是与我们是农耕民族有关吧，只要春天把种子种下，到了秋天就一定有收成。这种周而复始的自然规律，构成了我们特有的生活哲学。一种实用哲学 – 想要收获就去耕耘，没有结果的事，不要去尝
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>春种一粒粟，秋收万颗子。</p></blockquote><p>或许是与我们是农耕民族有关吧，只要春天把种子种下，到了秋天就一定有收成。这种周而复始的自然规律，构成了我们特有的生活哲学。一种实用哲学 – 想要收获就去耕耘，没有结果的事，不要去尝试。</p><p>当一个人除了本职工作以外，在其他方面表现平平，我们就会说这个人没什么本事；当一个人可以做很多事情时，我们又会说他不务正业。这就是唯结果论的我们，国人的实用哲学。可人生多些乐趣与多些结果，哪个更好呢?或许，这个简单的问题会烧死很多人的脑细胞。</p><p>新时代的4C人生，就是要敢于坚持自己梦想（Consistence）,即便有挫折也会充满信心(Confidence)，有勇气迎接任何挑战(Challenge)，尝试着去不断创新（Creativity），打破常规束缚，赢得充实的自我。</p><style type="text/css">    p {        text-indent: 2em    }</style>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/11/12/farming/#disqus_thread</comments>
    </item>
    
    <item>
      <title>路 · 我</title>
      <link>https://blog.futuredream.top/2017/11/11/streetSigns/</link>
      <guid>https://blog.futuredream.top/2017/11/11/streetSigns/</guid>
      <pubDate>Fri, 10 Nov 2017 19:22:13 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;我们好多人就像是路牌，站在路边给迷茫的人指引道路，自己却去不了想去的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;起&quot;&gt;&lt;a href=&quot;#起&quot; class=&quot;headerlink&quot; title=&quot;起&quot;&gt;&lt;/a&gt;起&lt;/h4&gt;&lt;p&gt;所有
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>我们好多人就像是路牌，站在路边给迷茫的人指引道路，自己却去不了想去的地方。</p></blockquote><h4 id="起"><a href="#起" class="headerlink" title="起"></a>起</h4><p>所有人，大抵上在自己有限的生命中都会追寻一件事情：寻找真我。寻找的方式和实现的途径也因人而异。中国人向来重视结果，只要能达到目的，过程是可以忽略的。但是，这和一个人毕生去寻找真我的过程是有些矛盾的，真我是随时可以实现，却又永远无法穷极的那个东西，它是一个无法完整却又真实存在的拼图。</p><p>徐静蕾曾说：”也许生命本身就带有不可避免的痛苦，既然免不了，不如尽量让自己快乐。如果思考导致了痛苦，那我宁可不要思考，尽可能做一些本能的选择”。而在真我之中，活出真我和实现真我又有着本质的区别，活出真我在于我们活着，在于活着的每分每秒，我们沐浴清风，聆听自然，影与光觥筹交错。但实现真我，却是一个听说过没见过的真实目标，在日常的点滴中，随心动，大觉大悟，大自在。</p><h4 id="落"><a href="#落" class="headerlink" title="落"></a>落</h4><p>半残岁月尽悠闲，半里乾坤开展。心情半佛半神仙，姓字半藏半显。半还天地，半留人间。</p><style type="text/css">    p {        text-indent: 2em    }</style>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/11/11/streetSigns/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java关于时区的获取的几种方式</title>
      <link>https://blog.futuredream.top/2017/11/06/timeZone/</link>
      <guid>https://blog.futuredream.top/2017/11/06/timeZone/</guid>
      <pubDate>Mon, 06 Nov 2017 10:19:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1.java8中基本只能通过当前位置所在城市名来获取时区&lt;br&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div c
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1.java8中基本只能通过当前位置所在城市名来获取时区<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//&lt;1&gt; 查看当前的时区</span></div><div class="line">ZoneId defaultZone = ZoneId.systemDefault();</div><div class="line">System.out.println(defaultZone); <span class="comment">//此处打印为时区所在城市Asia/Shanghai</span></div><div class="line"><span class="comment">//&lt;2&gt;查看美国纽约当前的时间</span></div><div class="line">ZoneId america = ZoneId.of(<span class="string">"America/New_York"</span>);</div><div class="line">LocalDateTime shanghaiTime = LocalDateTime.now(america);</div></pre></td></tr></table></figure><h4 id="如果是传入时间，又该如何计算时区呢？"><a href="#如果是传入时间，又该如何计算时区呢？" class="headerlink" title="如果是传入时间，又该如何计算时区呢？"></a>如果是传入时间，又该如何计算时区呢？</h4><p>2.使用SimpleDateFormat 来获取Date时区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"Z"</span>);</div><div class="line">System.out.println(dateFormat.format(<span class="keyword">new</span> Date()));<span class="comment">//‘z’小写CST；'Z'大写+0800</span></div></pre></td></tr></table></figure><p>3.使用lang3中的org.apache.commons.lang3.time函数获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">System.out.println(DateFormatUtils.format(<span class="keyword">new</span> Date(), <span class="string">"z"</span>));<span class="comment">//‘z’小写CST；'Z'大写 +0800</span></div><div class="line"></div><div class="line">System.out.println(DateFormatUtils.format(<span class="keyword">new</span> Date(), <span class="string">"ZZ"</span>));<span class="comment">//'zz'小写一样 "ZZ"大写+08:00</span></div></pre></td></tr></table></figure><p>4.使用日历类来计算出传入时间所在时区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Calendar cal = Calendar.getInstance();</div><div class="line">        <span class="keyword">int</span> offset = cal.get(Calendar.ZONE_OFFSET);</div><div class="line">        cal.add(Calendar.MILLISECOND, -offset);</div><div class="line">        Long timeStampUTC = cal.getTimeInMillis();</div><div class="line">        Long timeStamp = date.getTime();</div><div class="line">        Long timeZone = (timeStamp - timeStampUTC) / (<span class="number">1000</span> * <span class="number">3600</span>);</div><div class="line">        System.out.println(timeZone.intValue());<span class="comment">//8</span></div></pre></td></tr></table></figure><p>暂时总结出这几种。</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/11/06/timeZone/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Doker ELK 的安装部署使用教程</title>
      <link>https://blog.futuredream.top/2017/10/25/Doker_ELK/</link>
      <guid>https://blog.futuredream.top/2017/10/25/Doker_ELK/</guid>
      <pubDate>Tue, 24 Oct 2017 18:10:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;1-ELK是什么？&quot;&gt;&lt;a href=&quot;#1-ELK是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. ELK是
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="1-ELK是什么？"><a href="#1-ELK是什么？" class="headerlink" title="1. ELK是什么？"></a>1. ELK是什么？</h3><p>   ELK 是由Elasticsearch，Logstash 和 kibana 三个组件组成的 一种日志收集分析系统。</p><p>   其中：</p><ol><li>Logstash： 主要用来收集日志，并对日志进行分析，处理与储存，并将其发送给Elasticsearch</li><li>Elasticsearch： 为一开源的分布式搜索引擎 ，他可以为日志添加索引，对索引进行自动分片，提供良好的restful风格接口，提供自动的搜索负载等。</li><li>Kibana : 为该日志分析系统 提供web可视化的界面和可供查询编辑的各类分析视图等。</li></ol><h3 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2.工作流程"></a>2.工作流程</h3><p><img src="https://i.v2ex.co/2Zo3bPa3.png" alt="ELK工作流程"></p><p>Logstash从各个日志源进行日志的收集工作，并根据配置信息进行过滤，发送给Elasticsearch 添加索引，再由Kibana进行展示。</p><h3 id="3-选用-elk-docker-进行部署"><a href="#3-选用-elk-docker-进行部署" class="headerlink" title="3.选用 elk-docker 进行部署"></a>3.选用 elk-docker 进行部署</h3><p>在这里，选用 elk-docker 来进行容器的部署工作</p><ul><li>首先，使用 <code>sudo docker pull sebp/elk</code>  将相关 镜像 pull 下来；为什么使用 sebp/elk 是因为，他的文档写的 是最全面，最容易理解，<a href="http://elk-docker.readthedocs.io/" target="_blank" rel="noopener">文档</a>中包含了很多问题的解决办法；</li><li>安装前置条件：<ol><li>Docker至少得分配3GB的内存；</li><li>Elasticsearch至少需要单独2G的内存；</li><li>防火墙开放相关端口 这个可以查看<a href="http://elk-docker.readthedocs.io/" target="_blank" rel="noopener">文档</a>；</li><li><code>sudo vim /etc/sysctl.conf</code> 在该文件中添加 <code>vm.max_map_count = 262144</code> 然后执行命令 <code>sysctl -p</code> 查询修改是否成功</li></ol></li><li>安装 <ol><li>pull下docker镜像 其镜像的配置文件位于 <code>/etc/logstash/conf.d/</code> 文件夹下，他有几个配置文件 30-output.conf 为输出过滤，02-beats-input.conf 为输入过滤等等，可进行相应的配置替换；</li><li>如果替换的话，使用docker 的 -v 命令对 <code>/etc/logstash/conf.d/</code> 下的文件进行相应的替换。建议参考logstash的配置文档，先对logstash的配置有个初步的了解和认识。初次启动时建议按下面的方式进行启动，当成功启动后，进入docker容器，并进入<code>/etc/logstash/conf.d/</code> 下查看各个配置文件，您大概就知道如何进行配置工作了。</li><li>如果不替换 输入： <code>docker run -p 5601:5601 -p 9200:9200 -p 5044:5044 -it --name elk sebp/elk</code>  接着进入容器内部 输入 <code>docker exec -it &lt;container-name&gt; /bin/bash</code> ，并执行命令：<code>/opt/logstash/bin/logstash -e &#39;input { stdin { } } output { elasticsearch { hosts =&gt; [&quot;localhost&quot;] } }&#39;</code> 注意：如果看到这样的报错信息 Logstash could not be started because there is already another instance using the configured data directory.  If you wish to run multiple instances, you must change the “path.data” setting. 请执行命令：service logstash stop 然后在执行就可以了。当命令成功被执行后，看到：Successfully started Logstash API endpoint {:port=&gt;9600} 信息后，输入：this is a dummy entry 然后回车，模拟一条日志进行测试。</li><li>打开浏览器，输入：<a href="http://ip:5601" target="_blank" rel="noopener">http://ip:5601</a> 点击创建<br><img src="http://images2015.cnblogs.com/blog/1154245/201705/1154245-20170513171552754-2145153497.png" alt="创建方法"></li></ol></li></ul><p>如果你 Logstash 做了相应的 配置请在  <code>Index name or pattern</code> 中选对您的相应配置项 类似如下图中 我在<br>30-output.conf  中做了输出的数据时间头部的修改，所以就是如下图所示：</p><p><img src="http://img.blog.csdn.net/20171024173114928?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSjNva2Vy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="自我所示"></p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/10/25/Doker_ELK/#disqus_thread</comments>
    </item>
    
    <item>
      <title>行者 · 台灣 一</title>
      <link>https://blog.futuredream.top/2017/10/21/taiWan/</link>
      <guid>https://blog.futuredream.top/2017/10/21/taiWan/</guid>
      <pubDate>Fri, 20 Oct 2017 19:22:13 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;都可以随便，你说的，我都愿意去，小火车摆动的旋律。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;题记&quot;&gt;&lt;a href=&quot;#题记&quot; class=&quot;headerlink&quot; title=&quot;题记&quot;&gt;&lt;/a&gt;题记&lt;/h3&gt;&lt;hr&gt;
&lt;style t
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>都可以随便，你说的，我都愿意去，小火车摆动的旋律。</p></blockquote><h3 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h3><hr><style type="text/css">    p {        text-indent: 2em    }</style><p>時間如白駒過隙，不知不覺單身也有了些許時日。人雖走了，可是我的內心，卻未能放下。想想也是，何不趁著自己還年少，一個出去走走，散散心。</p><p>獨自來到深圳，平時工作繁忙，兩點一線之間疲於奔命。好不容易，回到了家，卻忽視了最愛人。也就十一有那麼些許空閒，我決定，一個出去走走。想到國內的熱門景點，只能看天上的雲流，和地上人流，肩併著肩，腳踏著腳，穿梭往來中，好不熱絡。想到這不如出去一片自由的土地–灣灣。特別是對於有來往台灣通行證，國慶去台灣算是個不錯的選擇。</p><h4 id="前往台灣前的準備"><a href="#前往台灣前的準備" class="headerlink" title="前往台灣前的準備"></a>前往台灣前的準備</h4><p>在一個中國的原則下，台灣現由中華民國政府實際管理。大陸遊客想要自由行去台灣，必須要求為開放城市或有該城市暫住證的居民才能申請赴台灣G簽證。其次，前往台灣之前需要向台灣移民局申請入台證，才可前往台灣。</p><p>我由於居住在深圳所以，很容易就能拿到G簽，而入台證方面呢，我在萬能的淘寶上，通過提交提供信用卡金卡掃描件，台灣通行證掃描件，身份證掃描件，和一寸證件照已經機酒行程規劃（只需要規劃即可）就順利的拿到了入台證。</p><p>當一切都準備好以後，便是出發了。機票我已經提前10天左右訂好的，10／03 - 10／09香港往返台北共一千八百元。在十一黃金週，算是很便宜了吧，而且飛機是國泰航空的波音787大型客機，客機餐點相對沒有國內航空的好吃，但是，可以在官網自主選擇適合自己的餐點。例如可以選擇穆斯林餐，全素食餐，印度教餐飲等，非常具有人性化，並且飛機上有一次性耳機，可獨立收看娛樂節目的小電視，不會干擾到其他人。酒店方面，由於自己是獨自出遊，全程選擇在airbnb預定青旅和民宿。</p><h4 id="前往香港國際機場"><a href="#前往香港國際機場" class="headerlink" title="前往香港國際機場"></a>前往香港國際機場</h4><p>因為想多休息一會，且又是住在蛇口，就決定從蛇口客運碼頭入境香港國際機場。船票一共270RMB，到香港後可退稅120HKD。大約半小時即可抵達，是最快抵達方式！</p><p style="text-align:center;"><br>    <img src="https://jokers-1252021562.cosgz.myqcloud.com/images/taiWan/%E8%9B%87%E5%8F%A3%E7%A2%BC%E9%A0%AD.JPG"><br>    <span>蛇口客運碼頭</span><br></p><p>在蛇口客運碼頭，就可辦理值機手續和托運行李，同時不需要使用港澳通行證，直接使用台灣通行證即可過關，是非常的方便和快捷的選擇，但是，必須要準備好來回的機票或船票行程單，否則過不去喔。當然，如果想圖便宜的話，從羅湖或福田口岸前往香港機場，是最便宜的，或者時間不著急，可以從這些口岸前往，並且還能夠去香港玩一玩。但卻十分的耗時。因為，如果從其他口岸入境，需要排隊填寫入境卡，並且還需要換乘以及先了解香港的交通路線。香港國際機場，很多免稅店，不要忘記買買買喔！</p><p style="text-align:center;"><br>    <img src="https://jokers-1252021562.cosgz.myqcloud.com/images/taiWan/HKAir.JPG"><br>    <span>香港赤鱲角國際機場時刻牌</span><br></p><p>香港赤鱲角國際機場曾在十二年內被英國航空評級機構Skytrax八度評為全球最佳機場，裡面的SKYCITY 航天城是與香港國際機場近在咫尺的大型綜合發展項目，佔地約25公頃。這個商業項目將結合零售、餐飲及娛樂設施、辦公大樓及酒店等，以滿足與日俱增的本地及海外旅客需求。總之，機場非常大，像我這種屌絲，就去萬寧，屈臣氏買了一些日化防曬用品，做最後的登機準備。</p><p>對喔，飛機是有可能提前飛，提前到的喔，這可是跟國內航班不一樣喔！</p><p>～～待續！</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/10/21/taiWan/#disqus_thread</comments>
    </item>
    
    <item>
      <title>springboot填坑之 -- spring cloud基于ip的discovery服务注册中心配置</title>
      <link>https://blog.futuredream.top/2017/07/30/discovery1/</link>
      <guid>https://blog.futuredream.top/2017/07/30/discovery1/</guid>
      <pubDate>Sat, 29 Jul 2017 20:07:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;spring-cloud基于ip的discovery服务注册中心配置&quot;&gt;&lt;a href=&quot;#spring-cloud基于ip的discovery服务注册中心配置&quot; class=&quot;headerlink&quot; title=&quot;spring cloud基于ip的discove
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="spring-cloud基于ip的discovery服务注册中心配置"><a href="#spring-cloud基于ip的discovery服务注册中心配置" class="headerlink" title="spring cloud基于ip的discovery服务注册中心配置"></a>spring cloud基于ip的discovery服务注册中心配置</h2><p><code>SpringBoot</code>  <code>springCloud</code></p><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><blockquote><p>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁，领导选举，分布式会话，集群状态）。分布式系统的协调导致锅炉板模式，并且使用Spring Cloud开发人员可以快速站起来实现这些模式的服务和应用程序。他们将在任何分布式环境中运行良好，包括开发人员自己的笔记本电脑，裸机数据中心，以及Cloud Foundry等托管平台。– <a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">引用自springCloud官网</a> </p></blockquote><hr><p>spring cloud 的注册中心的配置(包括其他的微服务的配置) 都是基于host进行配置的 会产生极大的不变 – 特别是在基于不同网段, 不同网关的 docker 容器之中 host的地址可能会不断变化,且 host不如ip容易维护.</p><p>综上所述: 本文将 聊一聊基于ip的注册中心的配置;</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 8761</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    lease-expiration-duration-in-seconds: 30 //1</div><div class="line">    lease-renewal-interval-in-seconds: 10 //2</div><div class="line">    prefer-ip-address: true //3</div><div class="line">    ip-address: 114.114.114.xxx //4</div><div class="line">  server:</div><div class="line">    enable-self-preservation: false</div><div class="line">    eviction-interval-timer-in-ms: 1200000</div><div class="line">  client:</div><div class="line">    register-with-eureka: false //5</div><div class="line">    fetch-registry: false //6</div><div class="line">    service-url:</div><div class="line">      defaultZone: http://$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;/eureka/  //7</div></pre></td></tr></table></figure><hr><h3 id="现在-来说明下"><a href="#现在-来说明下" class="headerlink" title="现在 来说明下:"></a>现在 来说明下:</h3><blockquote><ul><li><p>首先  1, 2  用来检测 服务是否存在 是否过期的</p><p>(1) 指注册中心在接收到最后一个心跳之后等待的时间（秒），然后才能从此视图中删除此实例，并禁止此实例的流量。<br>(2) 指注册的客户端服务需要向注册中心发送心跳以指示它仍然存在的频率（以秒为单位）。如果在leaseExpirationDurationInSeconds中指定的时间段内未收到心跳线，则eureka服务器将从其视图中删除该实例，因此不允许此实例的流量。</p></li><li><p>其次  (3)用来 开启 是否使用ip识别服务 当该变量为 <code>true</code> 时 此时 将会使用您的 内网ip去注册服务, 当您的服务注册中心是基于内网的服务,那么 配置服务到这一步即可.但是如果您的各项自服务,不再同一个网段中时, 请继续配置(4)</p></li><li><p>当您配置 (4) 时 即为手动配置ip地址注册服务, 此时 [3] 的配置将无效, 如果ip为指定注册中心所在的公网ip,那么 该注册中心将在公网可见.</p></li><li><p>当为单注册中心时, 做为注册中心,本服务当然不能注册自己 (5) ,(6) 配置为 false 服务才可以正常启动,当为多注册中心时(5) (6) 可不配置,但是(7)必须配置为<strong><em>非己</em></strong> 的url地址</p></li></ul></blockquote><hr>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/07/30/discovery1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git项目拆迁</title>
      <link>https://blog.futuredream.top/2017/07/29/git_move/</link>
      <guid>https://blog.futuredream.top/2017/07/29/git_move/</guid>
      <pubDate>Sat, 29 Jul 2017 11:24:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;本文摘自 &lt;a href=&quot;http://www.bijishequ.com/detail/260740?p=&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.bijishequ.com/detail/260740?p=&lt;/a&gt;&lt;/p&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>本文摘自 <a href="http://www.bijishequ.com/detail/260740?p=" target="_blank" rel="noopener">http://www.bijishequ.com/detail/260740?p=</a></p><p>目的：</p><p>将项目在不同的git服务器上进行转移（coding &lt;—&gt; github等）<br>保留所有代码（包括分支）<br>保留提交记录<br>说明：</p><p>将项目从coding.net上面拆迁到github上（或者反过来迁到其他的git服务器 上，方法大致相同）<br>参考文章：<br>Coding.net使用和从Github转移项目到Coding.net<br>操作方法：</p><p>说明：</p><p>我采用的是从coding.net —&gt; 迁移到 github上面<br>步骤：</p><p>git clone –bare git@git.coding.net<em>.git（git 要迁移的项目），会生成 </em>.git项目<br>cd 进入生成的项目 <em>.git 下面<br>git push –mirror git@github.com:</em>.git（需要迁移到的git服务器上面的一个空的项目）<br>大功告成！</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/07/29/git_move/#disqus_thread</comments>
    </item>
    
    <item>
      <title>springBoot填坑手册二 redis与cache之坑</title>
      <link>https://blog.futuredream.top/2017/07/29/redis1/</link>
      <guid>https://blog.futuredream.top/2017/07/29/redis1/</guid>
      <pubDate>Sat, 29 Jul 2017 11:24:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;spring-Boot-填坑手册-redis与cache之坑&quot;&gt;&lt;a href=&quot;#spring-Boot-填坑手册-redis与cache之坑&quot; class=&quot;headerlink&quot; title=&quot;spring Boot 填坑手册 redis与cache之坑&quot;&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="spring-Boot-填坑手册-redis与cache之坑"><a href="#spring-Boot-填坑手册-redis与cache之坑" class="headerlink" title="spring Boot 填坑手册 redis与cache之坑"></a>spring Boot 填坑手册 redis与cache之坑</h3><p>在处理高并发时,我们常常用到缓存,首先,说说redis的配置,与注意事项.</p><blockquote><p>在pom.xml中需要引入spring-boot-starter-data-redis和spring-boot-starter-cache 如此引入之后,缓存配置就默认为redis,配置redis 需要在application.properties中配置如下参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#redis</div><div class="line">spring.redis.database=1 ## 可选</div><div class="line">spring.redis.host=192.168.99.100</div><div class="line">spring.redis.port=6379</div><div class="line">spring.redis.pool.max-active=1024  ## 可选</div><div class="line">spring.redis.pool.max-wait=1000 ## 可选</div><div class="line">spring.redis.pool.max-idle=200 ## 可选</div></pre></td></tr></table></figure><p>这时大抵上redis就配置好了<br>redis本身给我们了 RedisTemplate 和 StringRedisTemplate 两块模版 ,实现对redis的操作 ,<br>这里面一定要注意 , 当使用 opsForValue() 来set对象时 ,首先 RedisTemplate 序列化对象会使用JDK的对象序列化 , 所以该对象一定要实现 Serializable (网上有推荐使用jackson做序列化的方法,并不推荐, 因为使用JDK本身的序列化可得到二进制字符 , 高效快速。)<br>其次，当opsXXX()来get对象时 , RedisTemplate 和 StringRedisTemplate 要区分开 , 否则得不到想要的结果 .</p><blockquote><p>接下来说缓存 , 这里因为使用了redis所以系统会默认redis做缓存, 如果想要redis做别的事情,而用别的缓存框架,该怎么办??</p></blockquote><p>1.那么首先 , 需要在application.properties中配置如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#Cache</div><div class="line">spring.cache.type=guava #指明所用的缓存架构,我这里用的 guava </div><div class="line">spring.cache.cache-names[0]=outsourced # 指明缓存库的名称</div></pre></td></tr></table></figure><ol><li>在pom.xml中需要引入对应的缓存工具<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.google.guava&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;guava&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;19.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></li></ol><p>3.对应缓存实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override                                      //key 缓存的键名 &apos;#&apos;不能少</div><div class="line">@Cacheable(value = &quot;outsourced&quot;, key = &quot;#name&quot;)//value 指缓存库的名称</div><div class="line">public UserInfo fineOne(String name) &#123;</div><div class="line">    UserInfo userInfo = userInfoRepository.findFirstByUserName(&quot;樱桃&quot;);</div><div class="line">    System.out.print(&quot;缓存了key为&quot;+name+&quot;的鬼&quot;);</div><div class="line">    return userInfo;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完</p><hr><p>后续更新：</p><p>文章中写的不太好，应该是不推荐使用JDK来做二进制缓存，JDK自带的序列化工具出来的二进制过长，再分布式环境，特别是跨语言的环境，推荐使用Thrift、Protobuf和Avro 等序列化通信解决方案，他们能友好的规避，XML体积太大，解析性能极差；JSON体积相对较小，解析相对较快，但表达能力较弱的特点。<br>当然，json对人来说的可读性较好，能如果想使用jackson2.x做缓存，可在redisTemplate中配置setKeySerializer/setValueSerializer/setHashValueSerializer等的序列化方式，这里使<code>GenericJackson2JsonRedisSerializer</code> 类来进行配置，具体配置可参考如下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    @Resource</div><div class="line">    private RedisProperties redisProperties;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public JedisPoolConfig jedisPoolConfig() &#123;</div><div class="line">        JedisPoolConfig config = new JedisPoolConfig();</div><div class="line">        config.setMaxIdle(10);</div><div class="line">        config.setMaxTotal(100);</div><div class="line">        config.setMaxWaitMillis(5000);</div><div class="line">        config.setMinIdle(0);</div><div class="line">        config.setTestOnBorrow(true);</div><div class="line">        config.setTestWhileIdle(true);</div><div class="line">        config.setNumTestsPerEvictionRun(2);</div><div class="line">        config.setTimeBetweenEvictionRunsMillis(30000);</div><div class="line">        config.setMinEvictableIdleTimeMillis(60000);</div><div class="line">        config.setSoftMinEvictableIdleTimeMillis(60000);</div><div class="line">        return config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public RedisConnectionFactory redisConnectionFactory() &#123;</div><div class="line">        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory(jedisPoolConfig());</div><div class="line">        redisConnectionFactory.setDatabase(redisProperties.getDatabase());</div><div class="line">        redisConnectionFactory.setHostName(redisProperties.getHost());</div><div class="line">        redisConnectionFactory.setPort(redisProperties.getPort());</div><div class="line">        redisConnectionFactory.setPassword(redisProperties.getPassword());</div><div class="line">        redisConnectionFactory.setTimeout(15000);</div><div class="line">        redisConnectionFactory.setUsePool(true);</div><div class="line">        return redisConnectionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public &lt;K, V&gt; RedisTemplate&lt;K, V&gt; redisTemplate() &#123;</div><div class="line">        RedisTemplate&lt;K, V&gt; template = new RedisTemplate&lt;&gt;();</div><div class="line">        template.setConnectionFactory(redisConnectionFactory());</div><div class="line">        template.setKeySerializer(new StringRedisSerializer());</div><div class="line">        template.setHashKeySerializer(new StringRedisSerializer());</div><div class="line">        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());</div><div class="line">        template.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());</div><div class="line">//        template.setEnableTransactionSupport(true);</div><div class="line">        template.afterPropertiesSet();</div><div class="line">        return template;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>特别强调：推荐使用 GenericJackson2JsonRedisSerializer 去替代 Jackson2JsonRedisSerializer<object>以及JacksonJsonRedisSerializer<object><br>因为GenericJackson2JsonRedisSerializer 可以保留泛型。<br>在处理高并发时,我们常常用到缓存,首先,说说redis的配置,与注意事项.</object></object></p><blockquote><p>在pom.xml中需要引入spring-boot-starter-data-redis和spring-boot-starter-cache 如此引入之后,缓存配置就默认为redis,配置redis 需要在application.properties中配置如下参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#redis</div><div class="line">spring.redis.database=1 ## 可选</div><div class="line">spring.redis.host=192.168.99.100</div><div class="line">spring.redis.port=6379</div><div class="line">spring.redis.pool.max-active=1024  ## 可选</div><div class="line">spring.redis.pool.max-wait=1000 ## 可选</div><div class="line">spring.redis.pool.max-idle=200 ## 可选</div></pre></td></tr></table></figure><p>这时大抵上redis就配置好了<br>redis本身给我们了 RedisTemplate 和 StringRedisTemplate 两块模版 ,实现对redis的操作 ,<br>这里面一定要注意 , 当使用 opsForValue() 来set对象时 ,首先 RedisTemplate 序列化对象会使用JDK的对象序列化 , 所以该对象一定要实现 Serializable (网上有推荐使用jackson做序列化的方法,并不推荐, 因为使用JDK本身的序列化可得到二进制字符 , 高效快速。)<br>其次，当opsXXX()来get对象时 , RedisTemplate 和 StringRedisTemplate 要区分开 , 否则得不到想要的结果 .</p><blockquote><p>接下来说缓存 , 这里因为使用了redis所以系统会默认redis做缓存, 如果想要redis做别的事情,而用别的缓存框架,该怎么办??</p></blockquote><p>1.那么首先 , 需要在application.properties中配置如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#Cache</div><div class="line">spring.cache.type=guava #指明所用的缓存架构,我这里用的 guava </div><div class="line">spring.cache.cache-names[0]=outsourced # 指明缓存库的名称</div></pre></td></tr></table></figure><ol><li>在pom.xml中需要引入对应的缓存工具<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.google.guava&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;guava&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;19.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></li></ol><p>3.对应缓存实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override                                      //key 缓存的键名 &apos;#&apos;不能少</div><div class="line">@Cacheable(value = &quot;outsourced&quot;, key = &quot;#name&quot;)//value 指缓存库的名称</div><div class="line">public UserInfo fineOne(String name) &#123;</div><div class="line">    UserInfo userInfo = userInfoRepository.findFirstByUserName(&quot;樱桃&quot;);</div><div class="line">    System.out.print(&quot;缓存了key为&quot;+name+&quot;的鬼&quot;);</div><div class="line">    return userInfo;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完</p><hr><p>后续更新：</p><p>文章中写的不太好，应该是不推荐使用JDK来做二进制缓存，JDK自带的序列化工具出来的二进制过长，再分布式环境，特别是跨语言的环境，推荐使用Thrift、Protobuf和Avro 等序列化通信解决方案，他们能友好的规避，XML体积太大，解析性能极差；JSON体积相对较小，解析相对较快，但表达能力较弱的特点。<br>当然，json对人来说的可读性较好，能如果想使用jackson2.x做缓存，可在redisTemplate中配置setKeySerializer/setValueSerializer/setHashValueSerializer等的序列化方式，这里使<code>GenericJackson2JsonRedisSerializer</code> 类来进行配置，具体配置可参考如下方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">    @Resource</div><div class="line">    private RedisProperties redisProperties;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public JedisPoolConfig jedisPoolConfig() &#123;</div><div class="line">        JedisPoolConfig config = new JedisPoolConfig();</div><div class="line">        config.setMaxIdle(10);</div><div class="line">        config.setMaxTotal(100);</div><div class="line">        config.setMaxWaitMillis(5000);</div><div class="line">        config.setMinIdle(0);</div><div class="line">        config.setTestOnBorrow(true);</div><div class="line">        config.setTestWhileIdle(true);</div><div class="line">        config.setNumTestsPerEvictionRun(2);</div><div class="line">        config.setTimeBetweenEvictionRunsMillis(30000);</div><div class="line">        config.setMinEvictableIdleTimeMillis(60000);</div><div class="line">        config.setSoftMinEvictableIdleTimeMillis(60000);</div><div class="line">        return config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public RedisConnectionFactory redisConnectionFactory() &#123;</div><div class="line">        JedisConnectionFactory redisConnectionFactory = new JedisConnectionFactory(jedisPoolConfig());</div><div class="line">        redisConnectionFactory.setDatabase(redisProperties.getDatabase());</div><div class="line">        redisConnectionFactory.setHostName(redisProperties.getHost());</div><div class="line">        redisConnectionFactory.setPort(redisProperties.getPort());</div><div class="line">        redisConnectionFactory.setPassword(redisProperties.getPassword());</div><div class="line">        redisConnectionFactory.setTimeout(15000);</div><div class="line">        redisConnectionFactory.setUsePool(true);</div><div class="line">        return redisConnectionFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public &lt;K, V&gt; RedisTemplate&lt;K, V&gt; redisTemplate() &#123;</div><div class="line">        RedisTemplate&lt;K, V&gt; template = new RedisTemplate&lt;&gt;();</div><div class="line">        template.setConnectionFactory(redisConnectionFactory());</div><div class="line">        template.setKeySerializer(new StringRedisSerializer());</div><div class="line">        template.setHashKeySerializer(new StringRedisSerializer());</div><div class="line">        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());</div><div class="line">        template.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());</div><div class="line">//        template.setEnableTransactionSupport(true);</div><div class="line">        template.afterPropertiesSet();</div><div class="line">        return template;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>特别强调：推荐使用 GenericJackson2JsonRedisSerializer 去替代 Jackson2JsonRedisSerializer<object>以及JacksonJsonRedisSerializer<object><br>因为GenericJackson2JsonRedisSerializer 可以保留泛型。</object></object></p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/07/29/redis1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>nginx代理TCP模块</title>
      <link>https://blog.futuredream.top/2017/06/28/nginx_tcp/</link>
      <guid>https://blog.futuredream.top/2017/06/28/nginx_tcp/</guid>
      <pubDate>Wed, 28 Jun 2017 09:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;nginx1-9之后的版本可代理TCP链接&quot;&gt;&lt;a href=&quot;#nginx1-9之后的版本可代理TCP链接&quot; class=&quot;headerlink&quot; title=&quot;nginx1.9之后的版本可代理TCP链接&quot;&gt;&lt;/a&gt;nginx1.9之后的版本可代理TCP链接&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="nginx1-9之后的版本可代理TCP链接"><a href="#nginx1-9之后的版本可代理TCP链接" class="headerlink" title="nginx1.9之后的版本可代理TCP链接"></a>nginx1.9之后的版本可代理TCP链接</h4><ol><li>其中Windows版本可直接使用</li><li>Linux版本需要在编译(./configure)时添加–with-stream参数</li><li>简单 示例如下</li></ol><p>1.简单代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">stream &#123;</div><div class="line">server &#123;</div><div class="line">listen 22;</div><div class="line">proxy_connect_timeout 20s;</div><div class="line">proxy_timeout 2m;</div><div class="line">proxy_pass ip:port;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.负载均衡 操作与Http代理非常的类似 下面是一个官方Demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">stream &#123;</div><div class="line">    upstream backend &#123;</div><div class="line">        hash $remote_addr consistent;</div><div class="line">        server backend1.example.com:12345 weight=5;</div><div class="line">        server 127.0.0.1:12345 max_fails=3 fail_timeout=30s;</div><div class="line">        server unix:/tmp/backend3;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    server &#123;</div><div class="line">        listen 12345;</div><div class="line">        proxy_connect_timeout 1s;</div><div class="line">        proxy_timeout 3s;</div><div class="line">        proxy_pass backend;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    server &#123;</div><div class="line">        listen [::1]:12345;</div><div class="line">        proxy_pass unix:/tmp/stream.socket;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>完</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/06/28/nginx_tcp/#disqus_thread</comments>
    </item>
    
    <item>
      <title>spring使用@Value标签读取.properties文件的中文乱码问题的解决</title>
      <link>https://blog.futuredream.top/2017/06/28/value/</link>
      <guid>https://blog.futuredream.top/2017/06/28/value/</guid>
      <pubDate>Wed, 28 Jun 2017 09:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;$begin$&lt;/p&gt;
&lt;h3 id=&quot;spring使用-Value标签读取-properties文件的中文乱码问题的解决&quot;&gt;&lt;a href=&quot;#spring使用-Value标签读取-properties文件的中文乱码问题的解决&quot; class=&quot;headerlink&quot; ti
        
      
      </description>
      
      <content:encoded><![CDATA[<p>$begin$</p><h3 id="spring使用-Value标签读取-properties文件的中文乱码问题的解决"><a href="#spring使用-Value标签读取-properties文件的中文乱码问题的解决" class="headerlink" title="spring使用@Value标签读取*.properties文件的中文乱码问题的解决"></a>spring使用@Value标签读取*.properties文件的中文乱码问题的解决</h3><p><code>spring</code> <code>中文乱码</code> <code>@Value</code> <code>*.properties</code></p><hr><p>在spring中我们常常使用.properties对一些属性进行一个提前配置, spring 在读取*.properties文件时,默认使用的是asci码, 这时 我们需要对其编码进行转换.  当然 方法有很多种 ,我说以下几种</p><hr><blockquote><p>1.$在配置spring.xml文件时,声明所需的*.properties文件时直接使用”utf-8”编码$<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/*.properties"</span> <span class="attr">file-encoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>2.$ 如果在所需类上注入 可使用以下方式来声明编码格式:$</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:conf/copyWriteUI.properties"</span>,encoding = <span class="string">"utf-8"</span>)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyWriteUI</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;a&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String a;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;b&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String b;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><blockquote><p>3.$不设置编码格式, 编写文件时 将中文转化为unicode编码$</p><ol><li>$如果你用的是IntelliJ IDEA 那么 按如下图操作以上步揍都可以省去啦!!! idea 会自动帮我们进行如上的第三步,解放了我们的双手!$<br><img src="http://img.blog.csdn.net/20161223170843818?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSjNva2Vy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="idea 会自动帮我们进行如上的第三步的"></li></ol></blockquote><h3 id="附录-spring-lt-context-property-placeholder-gt-的属性说明"><a href="#附录-spring-lt-context-property-placeholder-gt-的属性说明" class="headerlink" title="附录  spring &lt;context:property-placeholder/&gt; 的属性说明"></a>附录  spring <code>&lt;context:property-placeholder/&gt;</code> 的属性说明</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span>   </span></div><div class="line"><span class="tag">        <span class="attr">location</span>=<span class="string">"属性文件，多个之间逗号分隔"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">file-encoding</span>=<span class="string">"文件编码"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">ignore-resource-not-found</span>=<span class="string">"是否忽略找不到的属性文件"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">ignore-unresolvable</span>=<span class="string">"是否忽略解析不到的属性，如果不忽略，找不到将抛出异常"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">properties-ref</span>=<span class="string">"本地Properties配置"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">local-override</span>=<span class="string">"是否本地覆盖模式，即如果true，那么properties-ref的属性将覆盖location加载的属性，否则相反"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">system-properties-mode</span>=<span class="string">"系统属性模式，默认ENVIRONMENT（表示先找ENVIRONMENT，再找properties-ref/location的），NEVER：表示永远不用ENVIRONMENT的，OVERRIDE类似于ENVIRONMENT"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">order</span>=<span class="string">"顺序"</span>  </span></div><div class="line"><span class="tag">        /&gt;</span></div></pre></td></tr></table></figure><p>$end$</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/06/28/value/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Druid Spring Boot Starter数据库链接池新福利</title>
      <link>https://blog.futuredream.top/2017/06/28/druid/</link>
      <guid>https://blog.futuredream.top/2017/06/28/druid/</guid>
      <pubDate>Wed, 28 Jun 2017 08:38:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;druid-spring-boot-starter-1-1版本发布&quot;&gt;&lt;a href=&quot;#druid-spring-boot-starter-1-1版本发布&quot; class=&quot;headerlink&quot; title=&quot;druid-spring-boot-starter 
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="druid-spring-boot-starter-1-1版本发布"><a href="#druid-spring-boot-starter-1-1版本发布" class="headerlink" title="druid-spring-boot-starter 1.1版本发布"></a>druid-spring-boot-starter 1.1版本发布</h4><p>Druid 与spingBoot的完美整合由阿里官方发布了,作为最好最快最稳定的数据库连接池,现在有了springBoot版本,真好.<br>官方gitHub文档链接: <a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="noopener">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a><br>内附有maven地址.</p><p>完</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/06/28/druid/#disqus_thread</comments>
    </item>
    
    <item>
      <title>npm使用过程中遇到的 Cannot find module &#39;internal/fs&#39; 的问题</title>
      <link>https://blog.futuredream.top/2017/06/08/internal/</link>
      <guid>https://blog.futuredream.top/2017/06/08/internal/</guid>
      <pubDate>Wed, 07 Jun 2017 20:32:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;如题: 在使用npm中遇到如下问题:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/d
        
      
      </description>
      
      <content:encoded><![CDATA[<p>如题: 在使用npm中遇到如下问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node 7.0 Cannot find module &apos;internal/fs&apos;</div><div class="line"></div><div class="line">node 6.9 fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.</div></pre></td></tr></table></figure><p>  这时候 应该是graceful-fs  这个模块出现了问题!</p><pre><code>可能原因有以下几点:1. 没装2. npm的graceful-fs 出现了多个版本</code></pre><hr><pre><code>解决办法:首先查看: npm list graceful-fs 其次全局安装 graceful-fs  接着 在对应环境再安装一遍</code></pre><p>还有什么问题，也可以问博主，能解决问题就点个赞咯</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/06/08/internal/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring RestTemplate关联HttpClient4.5的配置HttpClient和自身的BUG</title>
      <link>https://blog.futuredream.top/2017/06/08/restTemplate/</link>
      <guid>https://blog.futuredream.top/2017/06/08/restTemplate/</guid>
      <pubDate>Wed, 07 Jun 2017 16:21:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;  如题 ,本博客将解决RestTemplate 的配置问题 ,同时告知其存在的BUG&lt;/p&gt;
&lt;p&gt;写作背景:&lt;/p&gt;
&lt;p&gt;我们知道HttpClient要想使用PATCH, PUT等请求 配置将相当麻烦, 当结合RestTemplate后就会变得十分简单. 那么如何进行
        
      
      </description>
      
      <content:encoded><![CDATA[<p>  如题 ,本博客将解决RestTemplate 的配置问题 ,同时告知其存在的BUG</p><p>写作背景:</p><p>我们知道HttpClient要想使用PATCH, PUT等请求 配置将相当麻烦, 当结合RestTemplate后就会变得十分简单. 那么如何进行结合?</p><p>&lt;本文基于SpringBoot框架, 相关Spring也可以进行参考设计&gt;</p><p>现在进行示例说明:</p><p>1.配置方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> yuton</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2017/5/30 13:31</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientRestConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">clientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory();</div><div class="line">        clientHttpRequestFactory.setHttpClient(HttpsClientPoolThread.builder().createSSLClientDefault());</div><div class="line">        <span class="comment">//这里是使用了自定义的一个HttpsClientPoolThread线程池单例 以后有机会会单独写文章展示其配置内容, 大家可以先使用默认的HttpClients.createDefault()进行配置,或自定义线程池;</span></div><div class="line">        clientHttpRequestFactory.setConnectTimeout(<span class="number">10000</span>);</div><div class="line">        clientHttpRequestFactory.setReadTimeout(<span class="number">10000</span>);</div><div class="line">        clientHttpRequestFactory.setConnectionRequestTimeout(<span class="number">200</span>);</div><div class="line">        <span class="keyword">return</span> clientHttpRequestFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(clientHttpRequestFactory());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2.使用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Resource</span></div><div class="line"><span class="keyword">private</span> CopyWriteUI copyWriteUI;</div><div class="line"><span class="meta">@Resource</span></div><div class="line"><span class="keyword">private</span> I18nMessageUI i18nMessageUI;</div><div class="line"><span class="meta">@Resource</span></div><div class="line"><span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> IResult <span class="title">callPolice</span><span class="params">(String imei, String onOff)</span> </span>&#123;</div><div class="line">    String url = copyWriteUI.getSocketUrl() + APITable.CALL_POLICE_WATCH</div><div class="line">            .replace(<span class="string">"&#123;imei&#125;"</span>, imei)</div><div class="line">            .replace(<span class="string">"&#123;onOff&#125;"</span>, onOff);</div><div class="line">    IResult result = restTemplate.patchForObject(url, <span class="keyword">null</span>, Result.class);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == result) &#123;</div><div class="line">        <span class="keyword">return</span> CommonTools.errorResult(ResultMessage.ERROR_PROMPT, i18nMessageUI.getNetworkAnomaly());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (result.isSuccessful()) &#123;</div><div class="line">        <span class="keyword">return</span> CommonTools.successResult(ResultMessage.STATUS_SUCCESS);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> CommonTools.errorResult(ResultMessage.ERROR_PROMPT, i18nMessageUI.getNetworkAnomaly());</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> IResult <span class="title">setWatchStepTime</span><span class="params">(String imei, String times)</span> </span>&#123;</div><div class="line">    String url = copyWriteUI.getSocketUrl() + APITable.SET_WATCH_STEP_TIME.replace(<span class="string">"&#123;imei&#125;"</span>, imei);</div><div class="line">    MultiValueMap&lt;String, String&gt; multiValueMap = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</div><div class="line">    multiValueMap.add(<span class="string">"times"</span>, times);</div><div class="line">    IResult result = restTemplate.postForObject(url, multiValueMap, Result.class);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == result) &#123;</div><div class="line">        <span class="keyword">return</span> CommonTools.errorResult(ResultMessage.ERROR_PROMPT, i18nMessageUI.getNetworkAnomaly());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (result.isSuccessful()) &#123;</div><div class="line">        <span class="keyword">return</span> CommonTools.successResult(ResultMessage.STATUS_SUCCESS);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> CommonTools.errorResult(ResultMessage.ERROR_PROMPT, i18nMessageUI.getNetworkAnomaly());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这里 要说明下:</p><ol><li>post put patch等请求 参数必须使用MultiValueMap进行接收和传递,否则 参数会为空!</li><li>get请求,如果需要使用Map传递参数,那么该Map一定不能是MultiValueMap! 否则, 传递的参数会附带上’[]’!</li></ol>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/06/08/restTemplate/#disqus_thread</comments>
    </item>
    
    <item>
      <title>从薛定谔的猫开始说起</title>
      <link>https://blog.futuredream.top/2017/04/14/firstCat/</link>
      <guid>https://blog.futuredream.top/2017/04/14/firstCat/</guid>
      <pubDate>Thu, 13 Apr 2017 20:46:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;生与死轮回不止，我们生，他们死！&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;   &amp;emsp;&amp;emsp;呐，生活呢最主要的就是开心喽，开心就好。与其不开心的过日子，不
        
      
      </description>
      
      <content:encoded><![CDATA[<p>生与死轮回不止，我们生，他们死！</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   &emsp;&emsp;呐，生活呢最主要的就是开心喽，开心就好。与其不开心的过日子，不如开开心心的过好每一天。因为，说不定呢，我们就只是活在一个空想的世界中，活在上帝的意识中。<br>   可能大家还记得，物理中杨氏双缝干涉实验吧，光在其中展示了其属于波的性质。那么光，就是一种电磁波吗？其实不然。光子（Photon）是一种基本粒子，是电磁辐射的量子。在量子场论里是负责传递电磁力的力载子。这种作用力的效应在微观层次或宏观层次都可以很容易地观察到，因为光子的静止质量为零，它可以移动至很远距离，这也意味着它在真空中的传播速度是光速。<br>如同其它微观粒子，光子具有波粒二象性，能够展现出波动性与粒子性。例如，它能在双缝实验里展示出波动性，也能在光电效应实验里展示出粒子性.在杨氏双缝干涉实验中,双缝之后出现了明亮条纹或明暗相间的条纹.那么可不可以假设,我们所处的宇宙,是双缝之中的一缝?</p><h3 id="一-猫是生是死"><a href="#一-猫是生是死" class="headerlink" title="一 猫是生是死?"></a>一 猫是生是死?</h3><p>   &emsp;&emsp;一只猫被封在一个密室里，密室里有食物有毒药。毒药瓶上有一个锤子，锤子由一个电子开关控制，电子开关由放射性装有少量镭控制。如果原子核衰变，则放出阿尔法粒子，触动电子开关，锤子落下，砸碎毒药瓶，释放出里面的氰化物气体，猫必死无疑。一个小时过去了,那么请问,猫是生还是死?</p><h3 id="二-临界判断"><a href="#二-临界判断" class="headerlink" title="二 临界判断."></a>二 临界判断.</h3><p>   &emsp;&emsp;这时，我们想想，如果这是个双缝干涉实验，当我们拉大的其中的一个缝隙，光是会产生亮条纹还是暗条纹？</p><h3 id="三-猫即生也死"><a href="#三-猫即生也死" class="headerlink" title="三 猫即生也死."></a>三 猫即生也死.</h3><p>   &emsp;&emsp;所有条纹都会存在，正如猫即是活的又是死的。总所周知，镭的衰变存在几率，如果镭发生衰变，会触发机关打碎装有氰化物的瓶子，猫就会死；如果镭不发生衰变，猫就存活。根据量子力学理论，由于放射性的镭处于衰变和没有衰变两种状态的叠加，猫就理应处于死猫和活猫的叠加状态。这只既死又活的猫就是所谓的“薛定谔猫”。</p><h3 id="四-开箱者即上帝"><a href="#四-开箱者即上帝" class="headerlink" title="四 开箱者即上帝."></a>四 开箱者即上帝.</h3><p>   &emsp;&emsp;猫是否生或死,对我们来说,打开箱子就知道了吗?是也不是. 开箱之后,猫确实只会存在一种状态–要么生,要么死! 可是造成这种状态出现的,就是我们. 我们成了上帝,我们观察了猫,构成箱子内物体的量子在得知我们的观察,而其中一种状态的量子固化为了物质,另一种状态的量子进行了自杀.一种状态的猫出现了.</p><h3 id="五-平行宇宙观"><a href="#五-平行宇宙观" class="headerlink" title="五 平行宇宙观"></a>五 平行宇宙观</h3><p>   &emsp;&emsp;在平行宇宙中薛定谔的猫也不必再为死活问题困扰。只不过是宇宙分裂成了两个，一个有活猫，一个有死猫罢了。对于那个活猫的宇宙，猫是一直活着的，不存在死活叠加的问题。对于死猫的宇宙，猫在分裂的那一刻就实实在在地死了，不要等人们打开箱子才“坍缩”，从而盖棺定论。</p><h3 id="六-薛定谔的猫态证实"><a href="#六-薛定谔的猫态证实" class="headerlink" title="六 薛定谔的猫态证实."></a>六 薛定谔的猫态证实.</h3><p>   &emsp;&emsp;美国国家标准和技术研究所的莱布弗里特等人在最新一期《自然》杂志上称，他们已实现拥有粒子较多而且持续时间最长的“薛定谔猫”态。实验中，研究人员将铍离子每隔若干微米“固定”在电磁场阱中，然后用激光使铍离子冷却到接近绝对零度，并分三步操纵这些离子的运动。为了让尽可能多的粒子在尽可能长的时间里实现“薛定谔猫”态，研究人员一方面提高激光的冷却效率，另一方面使电磁场阱尽可能多地吸收离子振动发出的热量。最终，他们使6个铍离子在50微秒内同时顺时针自旋和逆时针自旋，实现了两种相反量子态的等量叠加纠缠，也就是“薛定谔猫”态。</p><h2 id="弦论"><a href="#弦论" class="headerlink" title="弦论"></a>弦论</h2><p>   &emsp;&emsp;看来，唯物辩证法被推翻的的忧虑暂时是可以放下了，也许在不久的将来，随着以量子力学为基础的大一统理论确立（最可能的是弦论），辩证法也会被提高到一个史无前例的高峰。而建立在辩证法之上的理论，也就有了稳固的根基，而这正是我们研究哲学和物理的根本目的    </p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/04/14/firstCat/#disqus_thread</comments>
    </item>
    
    <item>
      <title>mysql8.0 zip安裝配置</title>
      <link>https://blog.futuredream.top/2017/01/20/mysql8/</link>
      <guid>https://blog.futuredream.top/2017/01/20/mysql8/</guid>
      <pubDate>Thu, 19 Jan 2017 19:46:33 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;MySQL 8.0版本的配置和以前有所不同，在这里与大家分享一下经验。&lt;br&gt;MySQL 8.0版本目前只有zip版本,此文說明Win系統下的配置 Linux可以以此類推;&lt;br&gt;下載mysql-8.0.0-dmr-winx64.zip&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将下载到的
        
      
      </description>
      
      <content:encoded><![CDATA[<p>MySQL 8.0版本的配置和以前有所不同，在这里与大家分享一下经验。<br>MySQL 8.0版本目前只有zip版本,此文說明Win系統下的配置 Linux可以以此類推;<br>下載mysql-8.0.0-dmr-winx64.zip</p><ol><li>将下载到的文件解压缩到自己喜欢的位置 我的是C:\Program Files\mysql-8.0.0</li><li>添加环境变量 Path = C:\Program Files\mysql-8.0.0\bin</li><li>添加配置文件 在MySQL的安装目录下的my.ini 文件進行修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">basedir=C:\Program Files\mysql-8.0.0</div><div class="line">datadir=C:\Program Files\mysql-8.0.0data</div></pre></td></tr></table></figure></li></ol><hr><ol><li>以管理员自身份打开CMD执行以下命令 mysqld –initialize –user=mysql –console 在控制台消息尾部会出现随机生成的初始密码，记下来</li><li>在CMD控制台里执行命令啟動 net start mysql</li><li>在CMD控制台里执行命令  mysql -u root -p 回车执行后，输入刚才记录的随机密码 执行成功后，控制台显示 mysql&gt;，则表示进入mysql 输入命令set password for root@localhost = password(‘123123TTT‘);<br>此时root用户的密码修改为123123TTT</li></ol><p>注意事项<br>1.管理員權限<br>2.密碼複雜度</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2017/01/20/mysql8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在spring中利用Guava实现本地Cache的具体配置 第一篇</title>
      <link>https://blog.futuredream.top/2016/12/24/guava/</link>
      <guid>https://blog.futuredream.top/2016/12/24/guava/</guid>
      <pubDate>Sat, 24 Dec 2016 14:13:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;基于注解的配置实现spring-Cache本地缓存-操作&quot;&gt;&lt;a href=&quot;#基于注解的配置实现spring-Cache本地缓存-操作&quot; class=&quot;headerlink&quot; title=&quot;基于注解的配置实现spring Cache本地缓存 操作&quot;&gt;&lt;/a&gt;基于
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="基于注解的配置实现spring-Cache本地缓存-操作"><a href="#基于注解的配置实现spring-Cache本地缓存-操作" class="headerlink" title="基于注解的配置实现spring Cache本地缓存 操作"></a>基于注解的配置实现spring Cache本地缓存 操作</h2><p><code>spring</code> <code>Guava</code> <code>cache</code><br>$begin$</p><blockquote><ul><li>Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库</li><li><p>通常来说，Guava Cache适用于：</p><p>  1.你愿意消耗一些内存空间来提升速度。<br>  2.你预料到某些键会被查询一次以上。<br>  3.缓存中存放的数据总量不会超出内存容量。<br>  <strong>注意!!!</strong> <strong>（Guava Cache是单个应用运行时的本地缓存。它不把数据存放到文件或外部服务器。如果这不符合你的需求，请尝试Memcached, redis缓存架构!!! 个人更推荐redis）</strong></p></li><li>具体Guava cache说明 <a href="http://ifeve.com/google-guava-cachesexplained/" target="_blank" rel="noopener">可参阅这里</a></li></ul></blockquote><hr><p>接下来就该说说spring中Guava的基于注解的实现的配置</p><p>当然 ,这里只说基于注解的配置和使用 我不会去说注解的原理 这不是本文要说的 .</p><blockquote><p>1.首先 新建一个spring-cache.xml配置文件 并将文件配置于web.xml中</p><ol><li>spring-cahe文件配置如下:</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 声明缓存注解的开启 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"cacheManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 声明使用spring管理缓存组 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.support.CompositeCacheManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagers"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"guavaCacheManager"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fallbackToNoOpCache"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 缓存的创建的具体实现类注入 class为自定义的类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guavaCacheManager"</span> <span class="attr">class</span>=<span class="string">"cn.springmvc.cache.GuavaCacheManagerConfig"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 此处可以配置一组缓存池对应不同的业务类型 这里我先实现了一个交"likr"的默认缓存并构建 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configMap"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value-type</span>=<span class="string">"com.google.common.cache.CacheBuilder"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"likr"</span> <span class="attr">value-ref</span>=<span class="string">"defaultCacheBuilder"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 此处直接构建"likr"默认缓存 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"defaultCacheBuilder"</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"com.google.common.cache.CacheBuilder"</span></span></div><div class="line"><span class="tag">          <span class="attr">factory-method</span>=<span class="string">"from"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 缓存池大小 时间(定时回收 缓存项在给定时间内没有被'写'访问 回收 还有refreshAfterWrite expireAfterAccess可供使用) 当然还有一些其他可选组件(weakKeys,removalListener and so on!) --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"maximumSize=10000, expireAfterWrite=1h"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>3.GuavaCacheManagerConfig的具体实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaCacheManagerConfig</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionSupportingCacheManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, Cache&gt; cacheMap = Maps.newConcurrentMap();</div><div class="line">    <span class="keyword">private</span> Map&lt;String, CacheBuilder&gt; builderMap = Maps.newHashMap();</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Collection&lt;? extends Cache&gt; loadCaches() &#123;</div><div class="line">        <span class="keyword">return</span> cacheMap.values();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//获取缓存单例</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">getCache</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Cache cache = <span class="keyword">this</span>.cacheMap.get(name);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cache) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.cacheMap) &#123;</div><div class="line">                cache = <span class="keyword">this</span>.cacheMap.get(name);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == cache &amp;&amp; <span class="keyword">this</span>.builderMap.containsKey(name)) &#123;</div><div class="line">                    CacheBuilder builder = <span class="keyword">this</span>.builderMap.get(name);</div><div class="line">                    cache = createGuavaCache(name, builder);</div><div class="line">                    <span class="keyword">this</span>.cacheMap.put(name, cache);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Cache <span class="title">createGuavaCache</span><span class="params">(String name, CacheBuilder builder)</span> </span>&#123;</div><div class="line">        com.google.common.cache.Cache&lt;Object, Object&gt; cache;</div><div class="line">        <span class="keyword">if</span>(builder == <span class="keyword">null</span>)&#123;</div><div class="line">            cache = CacheBuilder.newBuilder().build();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            cache = builder.build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GuavaCache(name, cache, isAllowNullValues());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAllowNullValues</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//配置中多组缓存池注入</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigMap</span><span class="params">(Map&lt;String, CacheBuilder&gt; configMap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.builderMap = configMap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>4.代码中使用:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//spring EL</span></div><div class="line"><span class="comment">//LikrUserQuestionnaire 普通的DTO</span></div><div class="line"><span class="comment">//@Cacheable(value = "likr", key = "'selectByRecordOne:userId:' + #record.user_id")</span></div><div class="line"><span class="comment">//value 为配置文件中的缓存池名称 key 为键名</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"likr"</span>, key = <span class="string">"'selectByRecordOne:userId:' + #record.user_id"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> LikrUserQuestionnaire <span class="title">selectByRecordOne</span><span class="params">(LikrUserQuestionnaire record)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> likrUserQuestionnaireMapper.selectByRecordOne(record);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>$end$</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2016/12/24/guava/#disqus_thread</comments>
    </item>
    
    <item>
      <title>spring4 + log4j2+ slf4j的配置</title>
      <link>https://blog.futuredream.top/2016/12/23/log4j2/</link>
      <guid>https://blog.futuredream.top/2016/12/23/log4j2/</guid>
      <pubDate>Fri, 23 Dec 2016 15:05:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;log4j2的一些配置介绍&quot;&gt;&lt;a href=&quot;#log4j2的一些配置介绍&quot; class=&quot;headerlink&quot; title=&quot;log4j2的一些配置介绍&quot;&gt;&lt;/a&gt;log4j2的一些配置介绍&lt;/h3&gt;&lt;p&gt;log4j2 相比log4j 解决了一些 死锁问题 
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="log4j2的一些配置介绍"><a href="#log4j2的一些配置介绍" class="headerlink" title="log4j2的一些配置介绍"></a>log4j2的一些配置介绍</h3><p>log4j2 相比log4j 解决了一些 死锁问题  改进了性能<br>下来 我直接挂配置留作本人日后参考</p><blockquote><p>1.maven配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- spring版本号 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- log4j日志文件管理包版本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- spring核心包 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- springframe start --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>2.log4j2.xml配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">#这一行我设置为OFF 表示不记录log4j2本身的日志</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>$&#123;web:rootDir&#125;/logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_NAME"</span>&gt;</span>likR<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line">        #这ThresholdFilter是个类似拦截器 level 填写日志显示类型</div><div class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"Error"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/error.log"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"error"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy.MM.dd 'at' HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;FILE_NAME&#125;.log"</span></span></div><div class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;LOG_HOME&#125;/$$&#123;date:yyyy-MM&#125;/$&#123;FILE_NAME&#125;-%d&#123;MM-dd-yyyy&#125;-%i.log.gz"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd 'at' HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></div><div class="line">            #日志文件最大值 第二天压缩</div><div class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"10 MB"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></div><div class="line">    #root 默认加载</div><div class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFile"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Error"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>3.web.xml配置<br>注意!! 是<strong><em>log4jConfiguration</em></strong>！！！<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 日志配置文件路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfiguration<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:conf/log4j2.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure></p></blockquote><p>4.代码中使用<br>private Logger logger = LoggerFactory.getLogger(getClass());<br>logger .error(“{}”,Object);</p><p>文章太简单?没办法 ,您想了解更多 请谷歌!</p>]]></content:encoded>
      
      <comments>https://blog.futuredream.top/2016/12/23/log4j2/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
